# 우리가 사용하는 컴퓨터는 실수를 표현할 때 주로 "부동소수점" 방식을 활용하여 실수를 표현합니다. 이 방법은 일정한 데이터 용량 안에 넓은 범위의 실수를 표현할 수 있어서 널리 쓰이는 방식입니다.
# 하지만 부동소수점 방식은 실수를 정확한 실수값이 아닌 근삿값으로 저장한다는 단점이 있습니다. 실제로 파이썬에서 실수 0.1을 단순히 100자리까지 출력하면 다음과 같은 결과를 얻습니다. 
# 0.1000000000000000055511151231257827021181583404541015625000000000000000000000000000000000000000000000
# 프로그래밍을 공부하고 있던 가영이는 무리수가 아닌 유리수까지도 실수 자료형으로는 근삿값으로 표현할 수 밖에 없다는 사실에 분노했습니다.
# 가영이를 위해 유리수와 알고 싶은 자릿수가 주어지면 이를 정확한 소수로 표현해주는 프로그램을 작성해주세요.

# X

import sys
from decimal import *

getcontext().prec = 10000

p, q = map(int, sys.stdin.readline().split())
n = int(sys.stdin.readline())

key = (Decimal(p) / Decimal(q))

print(f"{key:.{n}f}")